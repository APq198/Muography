#ifndef GENERATOR_HH
#define GENERATOR_HH 1

#include "G4VUserPrimaryGeneratorAction.hh"
#include "G4ParticleGun.hh"
#include "G4SystemOfUnits.hh"
#include "G4ParticleTable.hh"
#include "Randomize.hh"
#include "math.h"
#include "G4GenericMessenger.hh"
#include "constructor.hh"

#include "globals.hh"
#ifdef ONE_THREADED
	#include <fstream>
#endif

#define INCLUDE_HELIUM 0


class AccurateGenerator
{
	public:
		AccurateGenerator(G4double E_min, G4double E_max, G4double k, G4double b, G4String particleName, int length, G4double * energies0_, G4double * fluxes0_);
		~AccurateGenerator();
		G4double generate_accurate_E();
	private:
		G4double *energies0, *fluxes0;
		// G4double *lg_energies0;
		G4String particleName;
		G4double E_min, E_max;		// should be same for every object of this class
		G4double k, b;
		G4double NC_Psi;
		int length;
		G4double phi_interpolated(G4double lgE);
		G4double Psi(G4double);
		G4double inverse_CDF(G4double);
};	


class PrimaryGenerator : public G4VUserPrimaryGeneratorAction
{
	public:
		PrimaryGenerator();
		~PrimaryGenerator();

		virtual void GeneratePrimaries(G4Event * anEvent);
	private:
		void MyGeneratePrimaries_Muons(G4Event * anEvent);
		void MyGeneratePrimaries_CosmicRays_Asteroid(G4Event * anEvent);
		void MyGeneratePrimaries_CosmicRays_Surface(G4Event * anEvent);
		G4ParticleGun * fParticleGun;
		void GenerateMuonFlux();

		G4GenericMessenger * fMessenger;

		G4double momentum;
		G4double energy;
		G4String particleName;
		G4bool useDistribution;
		G4bool launchVertically;
		static const unsigned int numOfPoints = 29;
		//G4double energies0[29];
		//G4double fluxes0[29];
		// G4double energies0[29] = {
		// 	282518489.9667483,
		// 	393149690.8141331,
		// 	547102879.5511398,
		// 	761342480.502315,
		// 	1059682816.9221555,
		// 	1475218971.877678,
		// 	2230891386.7257385,
		// 	3105696577.6373997,
		// 	3980916300.305746,
		// 	5102782642.757679,
		// 	6542080141.015659,
		// 	9109220692.97067,
		// 	11680859003.840343,
		// 	16267653489.799633,
		// 	20856128956.930878,
		// 	26741445395.695816,
		// 	32884848574.952053,
		// 	40455386058.19259,
		// 	51866284781.70766,
		// 	75284564450.58363,
		// 	941103449842.5316,
		// 	3543047381596.9365,
		// 	17091140465325.418,
		// 	36002103821286.086,
		// 	50158847134420.58,
		// 	89558429206492.34,
		// 	181058861289951.53,
		// 	297603041534441.9,
		// 	450224202888678.4	//29
		// };
		// G4double fluxes0[29] = {
		// 	4277.654199066912,
		// 	3633.153005079787,
		// 	3085.7568527160474,
		// 	2620.8352196482674,
		// 	1890.5829836907567,
		// 	1158.323286254708,
		// 	602.7564188857535,
		// 	369.29709087504904,
		// 	226.26111818250686,
		// 	138.62577005384486,
		// 	72.13665969982199,
		// 	37.53773681925604,
		// 	16.590449618912096,
		// 	7.332435087468232,
		// 	3.8155775399500476,
		// 	1.8298325446794785,
		// 	1.319980075832034,
		// 	0.6868777248548796,
		// 	0.3574304018221044,
		// 	0.14558631963371407,
		// 	0.0002495531870178878,
		// 	0.000004954906469324441,
		// 	8.355757272293554e-8,
		// 	1.632172128563277e-8,
		// 	5.203697672647922e-9,
		// 	1.1967796184265081e-9,
		// 	1.9855111964445867e-10,
		// 	5.3764604311936354e-11,
		// 	2.0182015668528597e-11
		// };
		
		// G4double proton_energies0[62] // proton_fluxes0[62]
		G4double energies0[62] = {199921544.76111484, 240485460.88902575, 302953070.2457401, 381647033.5962363, 459082901.149991, 578332568.9900707, 728558087.2579212, 876381920.7579796, 1054199087.8478093, 1268095211.1129405, 1456544582.5280664, 1752076273.9864798, 2012449209.4022143, 2207189093.8715105, 2655025936.0148873, 3193728503.1375237, 3841733375.705851, 4412646532.26677, 5068402076.484144, 5821608284.521383, 6686747126.012868, 7680452710.314457, 8821831112.155489, 10132827726.011518, 11638649212.356182, 13368248148.594358, 15354879703.107552, 17636741035.637882, 22217995325.46859, 25519772050.509686, 29312219935.676872, 34454764327.90557, 40499518204.23605, 48716836961.05355, 59970402372.01342, 77312932946.73355, 101999017517.5311, 128493903143.87724, 154565209847.23392, 185926363123.77448, 223650668469.3146, 245292807379.31125, 295062515177.4548, 354930455536.01013, 407676038561.3912, 490393169700.62427, 563269625479.7191, 743122091047.5924, 936152722988.0698, 1179324274322.8462, 1354581554882.7917, 1960034024119.4404, 3110546343581.526, 4936393162825.432, 7833986305419.286, 11871307848915.094, 18839598072570.695, 29898176346968.05, 57075140782810.05, 108955531520501.83, 250196253568066.0, 601685613520239.0};
		G4double fluxes0[62] = {1492.49554505182, 1805.1850955720192, 1805.1850955720192, 1805.1850955720192, 1805.1850955720192, 1492.49554505182, 1492.49554505182, 1233.9692796398103, 1020.2242734613477, 843.5036311953877, 697.3940871117293, 576.5932649858903, 476.71725265692675, 394.1415080287651, 325.86932292753795, 222.75429519995427, 152.2680183094802, 125.89254117941584, 104.08575681597432, 71.14983758398104, 58.82544448529416, 40.21127336696097, 27.48719571845632, 18.78940568655321, 15.534752835119006, 10.619081562525311, 7.258879135601047, 4.9619476030028675, 2.804310428135217, 1.9169407765334439, 1.191480548089105, 0.8957233857950082, 0.6122890909287914, 0.346043291889239, 0.19557095110072745, 0.1005018168811834, 0.046961194001077754, 0.024132854564823503, 0.013639002490846559, 0.007708262959346138, 0.0052691326305264845, 0.0036018177927383435, 0.0024620924014946105, 0.0013914841406961597, 0.0009511759691218655, 0.0006501947796417433, 0.00036746619407366577, 0.00020767838809992954, 9.704128120312554e-05, 5.484416576120982e-05, 3.09959069042689e-05, 1.7517747448309716e-05, 4.626125296946266e-06, 1.477628358301306e-06, 3.9021534863390524e-07, 1.5075123182938445e-07, 3.981071705534953e-08, 8.692214496115054e-09, 1.2973091412086619e-09, 1.3235462760443923e-10, 1.975386920666182e-11, 2.9482561788479336e-12};
		G4double phi_interpolated(G4double E);
		///// G4double my_lerp(G4double x1, G4double x2, G4double y1, G4double y2, G4double x);
		G4double E_min_mes, E_max_mes;
		G4double E_min = 100e9;//1e11//pow(10, 10);
		G4double E_max = pow(10, 13);
		G4double k = -2.6;	// from PCR_Fluxes.ipynb - manually
		G4double b = 27.7;
		G4double NC_Psi = pow(10, b) * (pow(E_max, (k+1)) - pow(E_min, (k+1))) / (k+1); //normalizing constant for Psi(x)
		G4double Psi(G4double);
		G4double inverse_CDF(G4double);
		G4double generate_accurate_E();
		AccurateGenerator * ProtonGenerator;
		AccurateGenerator * AlphaGenerator;
};

G4double my_lerp(G4double x1, G4double x2, G4double y1, G4double y2, G4double x);

#endif